name: unifi

services:
  mongo:
    image: mongo:4.4.18
    restart: unless-stopped
    networks:
      unifi:
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/${MONGO_DBNAME}
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_DBNAME=${MONGO_DBNAME}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASS=${MONGO_PASS} 
    volumes:
      - ./mongo-data:/data/db
      - ./init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
  unifi-network-application:
    image: lscr.io/linuxserver/unifi-network-application:latest
    container_name: unifi-network-application
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASS=${MONGO_PASS}
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_DBNAME=${MONGO_DBNAME}
      - MEM_LIMIT=1024 #optional
      - MEM_STARTUP=1024 #optional
      - MONGO_TLS= #optional
      - MONGO_AUTHSOURCE= #optional
    volumes:
      - ./unifi-data:/config
    ports: # these are meaningless for macvlan and ipvlan networks
      - 8443:8443
      - 443:443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    restart: unless-stopped
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      management:
        ipv4_address: ${UNIFI_ADDRESS}
      unifi:
networks:
  management:
    external: true
    name: ${MANAGEMENT_NETWORK}
  unifi:
